openapi: 3.0.3
info:
  title: WASAPhoto
  description: |
    Share the moments you love with people you love!
  version: 1.0.0
  
components:
  
  parameters:
    uid:
      name: uid
      in: path
      schema:
        type: string
      required: true
    followedUid:
      name: followedUid
      in: path
      schema:
        type: string
      required: true
    followerUid:
      name: followerUid
      in: path
      schema:
        type: string
      required: true
    bannedUid:
      name: bannedUid
      in: path
      schema:
        type: string
      required: true
    photoId:
      name: photoId
      in: path
      schema:
        type: string
      required: true
    commentId:
      name: commentId
      in: path
      schema:
        type: string
      required: true

  schemas:
    username:
      type: object
      properties:
        name:
          type: string
          example: Maria
          pattern: 'Ë†.*?$'
          minLength: 3
          maxLength: 16
    photo:
      type: string
      format: binary
      properties:
        id:
          type: string
          example: "abcdef012345"
        name:
          type: string
          example: "MyFirstPhoto"
        uploadDate:
          type: string
          example: "DD/MM/YYYY"
        owner:
          type: string
          example: "Maria"
        likesCounter:
          type: integer
          example: "12"
    identifier:
      type: string
      example: "abcdef012345"
    profile:
      type: object
      properties:
        photos:
          type: array
          items:
            $ref: "#/components/schemas/photo"
        photoCounter:
          type: integer
          example: "12"
        followers:
          type: array
          items:
            $ref: "#/components/schemas/identifier"
        following:
          type: array
          items:
            $ref: "#/components/schemas/identifier"
        followersCounter:
          type: integer
          example: "12"
        followingCounter:
          type: integer
          example: "12"
    comment:
      type: object
      properties:
        time:
          type: string
          example: "DD/MM/YY-HH:MM:SS"
        uid_owner:
          type: string
          example: "abcdef012345"
  
  responses:
    ServerDown:
      description: "Server is down"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Server Down"
    BadRequest:
      description: "Bad request"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Bad request"
    Success:
      description: "Success"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Success"
    DeleteSuccess:
      description: "Resource deleted successfully"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Successfully deleted"

paths:
  /session:
    # doLogin
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref : "#/components/schemas/username"
        required: true
      
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    # change here if you decide to use an integer
                    # or any other type of identifier
                    $ref: "#/components/schemas/identifier"
                  message:
                    type: string
                    example: "Logged in"
        '400':
          $ref : "#/components/responses/BadRequest"
                    
        '500':
          $ref : "#/components/responses/ServerDown"
  
  /user/{uid}/username:
    # setMyUserName 
    patch:
      tags: ["User"]
      summary: "Change my username"
      operationId: SetMyUserName
      parameters:
        - $ref: "#/components/parameters/uid"
      requestBody:
        description: New Username
        content:
          application/json:
            schema:
              $ref : "#/components/schemas/username"
        required: true
      responses:
        '201':
          description: Username changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username changed"
        '400':
          $ref : "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
  
  /user/{uid}/following:
    # followUser
    put:
      tags: ["User"]
      operationId: followUser
      parameters:
        - $ref: "#/components/parameters/uid"
      summary: "Follow a user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/username"
        required: true
      responses:
        '201':
          description: Successfully added in following section
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Success"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
    # getFollowingId
    get:
      summary: Get following users ids
      tags: ["User"]
      operationId: getFollowingId
      parameters:
        - $ref: "#/components/parameters/uid"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/identifier"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
          
  /user/{uid}/following/stream:
    #getMyStream
    get:
      summary: Get user stream
      tags: ["Photo"]
      operationId: getMyStream
      parameters:
        - $ref: "#/components/parameters/uid"
      responses:
        '200':
          description: Return stream of photo from following
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/photo"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
                
  /user/{uid}/following/{followedUid}:
    # unfollowUser
    delete:
      tags: ["User"]
      parameters:
        - $ref: "#/components/parameters/uid"
        - $ref: "#/components/parameters/followedUid"
      summary: "Unfollow a user"
      operationId: unfollowUser
      responses:
        '200':
          $ref: "#/components/responses/DeleteSuccess"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
          
  /user/{uid}/followers:
    # addFollower
    put:
      tags: ["User"]
      operationId: addFollower
      parameters:
        - $ref: "#/components/parameters/uid"
      summary: Add a Follower
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/identifier"
      responses:
        '201':
          description: New follower added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully added new follower"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
          
  /user/{uid}/followers/{followerUid}:
    #removeFollower
    delete:
      tags: ["User"]
      summary: Remove a Follower
      operationId: removeFollower
      parameters:
        - $ref: "#/components/parameters/uid"
        - $ref: "#/components/parameters/followerUid"
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
          
  /user/{uid}/ban:
    #banUser
    put:
      summary: Ban user
      operationId: banUser
      tags: ["User"]
      parameters:
        - $ref: "#/components/parameters/uid"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/identifier"
      responses:
        '201':
          description: User identifier has been banned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Success"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
  
  /user/{uid}/ban/{bannedUid}:
    #unbanUser
    delete:
      summary: Unban user
      tags: ["User"]
      operationId: unbanUser
      parameters:
        - $ref: "#/components/parameters/uid"
        - $ref: "#/components/parameters/bannedUid"
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
        
  /user/{uid}/profile:
    #getUserProfile
    get:
      summary: Get user profile info
      operationId: getUserProfile
      tags: ["User"]
      parameters:
        - $ref: "#/components/parameters/uid"
      responses:
        '201':
          description: "Profile info returned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/profile"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
          
  /photo:
    # uploadPhoto
    post:
      tags: ["User", "Photo"]
      operationId: uploadPhoto
      summary: "Upload a photo"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/photo"
        required: true
      responses:
        '201':
          description: A photo has been uploaded succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Photo uploaded"
        '400':
          $ref : "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
          
  /photo/{photoId}/likes:
    # likePhoto
    put:
      summary: Put like to a photo
      tags: ["Photo", "User"]
      operationId: likePhoto
      parameters:
        - $ref: "#/components/parameters/photoId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/identifier"
        required: true
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
          
  /photo/{photoId}/likes/{uid}:
    # unlikePhoto
    delete:
      summary: Unlike a photo
      tags: ["Photo", "User"]
      operationId: unlikePhoto
      parameters:
        - $ref: "#/components/parameters/photoId"
        - $ref: "#/components/parameters/uid"
      responses:
        '200':
          $ref: "#/components/responses/DeleteSuccess"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
      
  /photo/{photoId}/comment:
    #commentPhoto
    post:
      summary: Add comment to a photo
      operationId: commentPhoto
      parameters:
        - $ref: "#/components/parameters/photoId"
      tags: ["Photo", "User"]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/comment"
      responses:
        '201':
          description: Comment added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Success"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
          
  /photo/{photoId}/comment/{commentId}:
    # uncommentPhoto
    delete:
      summary: Delete a comment
      operationId: uncommentPhoto
      tags: ["User", "Photo"]
      parameters:
        - $ref: "#/components/parameters/photoId"
        - $ref: "#/components/parameters/commentId"
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
          
  /photo/{photoId}:
    # deletePhoto
    delete:
      summary: Delete photo
      parameters:
        - $ref: "#/components/parameters/photoId"
      tags: ["User", "Photo"]
      operationId: deletePhoto
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
