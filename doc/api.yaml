openapi: 3.0.3
info:
  title: WASAPhoto
  description: |
    Share the moments you love with people you love!
  version: 2.0.2

tags:
  - name: Login
  - name: User
  - name: Photo
  
components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  parameters:
    uid:
      name: uid
      description: User identifier given by server at the moment of the sign up
      in: path
      schema:
        $ref: "#/components/schemas/user/properties/id"
      required: true
    photo_id:
      name: photo_id
      in: path
      description: Photo id
      schema:
        type: integer
        description: Photo id
        example: 12
      required: true
    comment_id:
      name: comment_id
      description: Comment id
      in: path
      schema:
        type: integer
        description: Comment id
        example: 12
      required: true

  schemas:
    photo:
      type: object
      description: Photo Object
      properties:
        photo_data:
          type: string
          format: binary
          description: photo binary data
          minLength: 0
          maxLength: 100
        username_owner:
          $ref: "#/components/schemas/user/properties/name"
    profile:
      type: object
      description: User profile infos
      properties:
        username:
          $ref: "#/components/schemas/user/properties/name"
        id:
          $ref: "#/components/schemas/user/properties/id"
        following:
          type: integer
          description: following amount
          example: 12
        followers:
          type: integer
          description: followers amount
          example: 12
        posts_amount:
          type: integer
          description: posts amount
          example: 12
    user:
      type: object
      description: User infos
      properties:
        name:
          type: string
          description: User name
          pattern: '[a-zA-Z0-9]'
          example: 'Maria'
          minLength: 3
          maxLength: 16
        id:
          type: integer
          description: User identifier
          example: 12
   
    comment:
      required:
        - text
        - username_owner
      type: object
      description: Comment object
      properties:
        text:
          type: string
          description: 'Text of a comment'
          pattern: '^.{3,150}$'
          example: "This is a comment!"
          minLength: 1
          maxLength: 150
        username_owner:
          $ref: "#/components/schemas/user/properties/name"
  
  responses:
    ServerDown:
      description: "Server is down"
      content:
        application/json:
          schema:
            type: string
            description: Log
            example: "Server Down"
    BadRequest:
      description: "Bad request"
      content:
        application/json:
          schema:
            type: string
            description: Log
            example: "Bad request"
    Success:
      description: "Success"
      content:
        application/json:
          schema:
            type: string
            description: Log
            example: "Success"
    DeleteSuccess:
      description: "Resource deleted successfully"
      content:
        application/json:
          schema:
            type: string
            description: Log
            example: "Deleted"

paths:
  /session:
    # doLogin
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
        required: true
      
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user/properties/id'
        '400':
          $ref : "#/components/responses/BadRequest"
                    
        '500':
          $ref : "#/components/responses/ServerDown"
  
  /user:
    # searchUser
    parametrs:
      - in: query
      name: username
      schema:
        type: string
      description: "Username to look for"
    get:
      tags: ["User"]
      summary: "Search users"
      description: To search users
      operationId: getUsers
      responses:
        '200':
          description: Return usernames
          content:
            application/json:
              schema:
                type: object
                description: response object
                properties:
                  users:
                    type: array
                    description: Array of users
                    items:
                      $ref: "#/components/schemas/user"
                    minItems: 0
                    maxItems: 100
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
      security:
        - bearerAuth: [] 

  /user/{uid}/username:
    # setMyUserName
    parameters:
     - $ref: "#/components/parameters/uid"
    put:
      tags: ["User"]
      summary: "Change my username"
      description: If a user want to change his username he can patch it
      operationId: setMyUserName
      requestBody:
        description: New Username
        content:
          application/json:
            schema:
              type: object
              description: request object
              properties:
                newUsername:
                  $ref: "#/components/schemas/user/properties/name"
        required: true
      responses:
        '200':
          $ref : "#/components/responses/Success"
        '400':
          $ref : "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
      security:
        - bearerAuth: [] 
  
  /user/{uid}/following:
    # followUser
    parameters:
      - $ref: "#/components/parameters/uid"
    post:
      tags: ["User"]
      operationId: followUser
      summary: "Follow a user"
      description: A user can change his username specifying it in the requestBody
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: request object
              properties:
                username:
                  $ref: "#/components/schemas/user/properties/name"
        required: true
      responses:
        '201':
          description: Successfully added in following collection
          content:
            application/json:
              schema:
                type: string
                description: Log
                example: "Success"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
      security:
        - bearerAuth: [] 
          
  /user/{uid}/stream:
    #getMyStream
    parameters:
      - $ref: "#/components/parameters/uid"
    get:
      summary: Get user stream
      description: Get user stream
      tags: ["Photo"]
      operationId: getMyStream
      responses:
        '200':
          description: Return stream of photo from following
          content:
            application/json:
              schema:
                type: object
                description: response object
                properties:
                  stream:
                    type: array
                    description: Array of photo
                    items:
                      $ref: "#/components/schemas/photo"
                    minItems: 0
                    maxItems: 10
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
      security:
        - bearerAuth: [] 
                
  /user/{uid}/following/{following_uid}:
    # unfollowUser
    parameters:
      - $ref: "#/components/parameters/uid"
      - name: following_uid
        description: User identifier
        in: path
        schema:
          $ref: "#/components/schemas/user/properties/id"
        required: true
    delete:
      tags: ["User"]
      summary: "Unfollow a user"
      description: Delete a follower from your following users
      operationId: unfollowUser
      responses:
        '200':
          $ref: "#/components/responses/DeleteSuccess"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
      security:
          - bearerAuth: [] 
          
  /user/{uid}/ban:
    #banUser
    parameters:
      - $ref: "#/components/parameters/uid"
    post:
      summary: Ban user
      description: Put a user in your own banned list
      operationId: banUser
      tags: ["User"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: request object
              properties:
                username:
                  $ref: "#/components/schemas/user/properties/name"
        required: true
      responses:
        '201':
          description: User identifier has been banned
          content:
            application/json:
              schema:
                type: object
                description: request Object
                properties:
                  message:
                    type: string
                    description: Log
                    example: "Success"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
      security:
        - bearerAuth: [] 
  
  /user/{uid}/ban/{banned_uid}:
    #unbanUser
    parameters:
      - $ref: "#/components/parameters/uid"
      - name: banned_uid
        description: User identifier
        in: path
        schema:
          $ref: "#/components/schemas/user/properties/id"
        required: true
    delete:
      summary: Unban user
      description: Remove a user from your banned list
      tags: ["User"]
      operationId: unbanUser
      responses:
        '200':
          $ref: "#/components/responses/DeleteSuccess"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
      security:
        - bearerAuth: [] 
        
  /user/{uid}:
    #getUserProfile
    parameters:
      - $ref: "#/components/parameters/uid"
    get:
      summary: Get user profile info
      description: Get user profile info by user id
      operationId: getUserProfile
      tags: ["User"]
      responses:
        '200':
          description: Return user profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/profile"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
      security:
        - bearerAuth: [] 
          
  /photo:
    # uploadPhoto
    post:
      tags: ["User", "Photo"]
      operationId: uploadPhoto
      summary: "Upload a photo"
      description: Upload a photo in your account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/photo"
        required: true
      responses:
        '201':
          description: A photo has been uploaded succesfully
          content:
            application/json:
              schema:
                type: object
                description: message object
                properties:
                  message:
                    type: string
                    description: Log
                    example: "Photo uploaded"
        '400':
          $ref : "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
      security:
        - bearerAuth: [] 
        
  /photo/{photo_id}/likes:
    # likePhoto
    parameters:
      - $ref: "#/components/parameters/photo_id"
    post:
      summary: Put like to a photo
      description: Put like to a photo
      tags: ["Photo", "User"]
      operationId: likePhoto
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: username
              properties:
                username:
                  $ref: "#/components/schemas/user/properties/name"
        required: true
      responses:
        '201':
          description: Successfully added in following collection
          content:
            application/json:
              schema:
                type: object
                description: message object
                properties:
                  message:  
                    type: string
                    description: Log
                    example: "Success"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
      security:
        - bearerAuth: [] 
          
  /photo/{photo_id}/likes/{uid}:
    # unlikePhoto
    parameters:
      - $ref: "#/components/parameters/photo_id"
      - $ref: "#/components/parameters/uid"
    delete:
      summary: Unlike a photo
      description: Remove your like to one of the social network photos
      tags: ["Photo", "User"]
      operationId: unlikePhoto
      responses:
        '200':
          $ref: "#/components/responses/DeleteSuccess"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
      security:
        - bearerAuth: [] 
      
  /photo/{photo_id}/comment:
    #commentPhoto
    parameters:
      - $ref: "#/components/parameters/photo_id"
    post:
      summary: Add comment to a photo
      description: Add your commento to a photo
      operationId: commentPhoto
      tags: ["Photo", "User"]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/comment"
        required: true
      responses:
        '201':
          description: Comment added
          content:
            application/json:
              schema:
                type: object
                description: response object
                properties:
                  message:
                    type: string
                    description: Log
                    example: "Success"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
      security:
        - bearerAuth: [] 
          
  /photo/{photo_id}/comment/{comment_id}:
    # uncommentPhoto
    parameters:
      - $ref: "#/components/parameters/photo_id"
      - $ref: "#/components/parameters/comment_id"
    delete:
      summary: Delete a comment
      description: Delete a comment from a photo
      operationId: uncommentPhoto
      tags: ["User", "Photo"]
      responses:
        '200':
          $ref: "#/components/responses/DeleteSuccess"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
      security:
        - bearerAuth: [] 
          
  /photo/{photo_id}:
    # deletePhoto
    parameters:
        - $ref: "#/components/parameters/photo_id"
    delete:
      summary: Delete photo
      description: Delete a photo from the site
      tags: ["User", "Photo"]
      operationId: deletePhoto
      responses:
        '200':
          $ref: "#/components/responses/DeleteSuccess"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerDown"
      security:
        - bearerAuth: [] 